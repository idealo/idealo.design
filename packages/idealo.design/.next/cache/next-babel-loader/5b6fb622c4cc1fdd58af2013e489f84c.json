{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport styles from './Header.module.scss';\nimport btnIco from './ico_hamburger.svg';\nimport magnifierIco from './ico_search.svg';\nimport closeIco from './ico_cross_circle_outline.svg';\nimport { getElementBySlug } from '../../data/elements';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOnKeyUp = this.handleOnKeyUp.bind(this);\n  }\n\n  componentDidMount() {\n    window.document.addEventListener('keyup', this.handleOnKeyUp);\n  }\n\n  componentWillUnmount() {\n    window.document.removeEventListener('keyup', this.handleOnKeyUp);\n  }\n\n  handleOnKeyUp(event) {\n    if (event.ctrlKey && event.which == 70) {\n      this.props.onClick();\n    }\n  }\n\n  render() {\n    const searchInputStyle = {\n      visibility: this.props.isOpen ? 'visible' : 'hidden',\n      width: this.props.isOpen ? '40vw' : 0,\n      padding: this.props.isOpen ? '.5rem' : 0,\n      margin: this.props.isOpen ? 'auto 2rem auto auto' : 0\n    };\n    return __jsx(React.Fragment, null, __jsx(\"input\", {\n      style: searchInputStyle,\n      className: styles.SearchInput,\n      onTransitionEnd: event => {\n        event.persist();\n        event.target.focus();\n        event.target.value = '';\n      },\n      autoFocus: true\n    }), __jsx(\"img\", {\n      className: styles.SearchToggle,\n      onClick: this.props.onClick,\n      src: this.props.isOpen ? closeIco : magnifierIco\n    }));\n  }\n\n}\n\nclass StickyMenu extends React.Component {\n  render() {\n    const element = getElementBySlug('button');\n    const style = {\n      marginLeft: this.props.isSidebarOpen ? '17rem' : '2.5rem'\n    };\n    return __jsx(\"div\", {\n      style: style,\n      className: styles.StickyMenu\n    }, this.props.active && __jsx(React.Fragment, null, element.sections && element.sections.filter(section => section.type === 'h2').map((section, idx) => __jsx(\"a\", {\n      key: idx,\n      href: `#${section.content}`\n    }, section.content))));\n  }\n\n}\n\nexport class Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSearchInputOpen: false,\n      isStickyMode: false,\n      isSidebarOpen: true\n    };\n    this.toggleNavbarState = this.toggleNavbarState.bind(this);\n    this.openSearchInput = this.openSearchInput.bind(this);\n    this.closeSearchInput = this.closeSearchInput.bind(this);\n    this.toggleSearchInput = this.toggleSearchInput.bind(this);\n    this.enableSticky = this.enableSticky.bind(this);\n    this.disableSticky = this.disableSticky.bind(this);\n    this.toggleSidebar = this.toggleSidebar.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('Header:enableSticky', this.enableSticky);\n    window.addEventListener('Header:disableSticky', this.disableSticky);\n    window.document.addEventListener('click:toggleSidebar', this.toggleSidebar);\n\n    document.onkeydown = evt => {\n      evt = evt || window.event;\n      var isEscape = false;\n\n      if (\"key\" in evt) {\n        isEscape = evt.key === \"Escape\" || evt.key === \"Esc\";\n      } else {\n        isEscape = evt.keyCode === 27;\n      }\n\n      if (isEscape) {\n        this.closeSearchInput();\n      }\n    };\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('Header:enableSticky', this.enableSticky);\n    window.removeEventListener('Header:disableSticky', this.disableSticky);\n    window.document.removeEventListener('click:toggleSidebar', this.toggleSidebar);\n  }\n\n  toggleSidebar() {\n    this.setState({\n      isSidebarOpen: !this.state.isSidebarOpen\n    });\n  }\n\n  enableSticky() {\n    this.setState({\n      isStickyMode: true\n    });\n  }\n\n  disableSticky() {\n    this.setState({\n      isStickyMode: false\n    });\n  }\n\n  closeSearchInput() {\n    this.setState({\n      isSearchInputOpen: false\n    });\n  }\n\n  openSearchInput() {\n    this.setState({\n      isSearchInputOpen: true\n    });\n  }\n\n  toggleSearchInput() {\n    this.setState({\n      isSearchInputOpen: !this.state.isSearchInputOpen\n    });\n  }\n\n  toggleNavbarState() {\n    const toggleEvent = new Event('click:toggleSidebar');\n    window.document.dispatchEvent(toggleEvent);\n  }\n\n  render() {\n    const stickyStyle = {\n      backgroundColor: '#0A3761',\n      color: '#0A3761',\n      padding: '.5rem 0'\n    };\n    const logoStickyStyle = {\n      color: '#0A3761'\n    };\n    return __jsx(\"header\", {\n      style: this.state.isStickyMode ? stickyStyle : null,\n      className: styles.Header\n    }, __jsx(\"img\", {\n      className: styles.SideNavToggle,\n      src: btnIco,\n      onClick: this.toggleNavbarState\n    }), __jsx(\"h1\", {\n      style: this.state.isStickyMode ? {\n        display: 'none'\n      } : null\n    }, __jsx(Link, {\n      href: \"/\"\n    }, __jsx(\"a\", {\n      style: this.state.isStickyMode ? logoStickyStyle : null\n    }, \"idealo design system\"))), __jsx(StickyMenu, {\n      isSidebarOpen: this.state.isSidebarOpen,\n      active: this.state.isStickyMode\n    }), __jsx(Search, {\n      onClick: this.toggleSearchInput,\n      closeSearchInput: this.closeSearchInput,\n      isOpen: this.state.isSearchInputOpen\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}