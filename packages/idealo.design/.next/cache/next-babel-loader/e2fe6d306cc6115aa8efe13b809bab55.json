{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport Highlight from 'react-highlight';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { twilight } from 'react-syntax-highlighter/dist/cjs/styles/prism';\nimport Card from 'components/Card';\nimport styles from './ElementBody.module.scss';\nimport { Preview as RenderPreview } from './Preview';\n\nfunction H1(section) {\n  return __jsx(React.Fragment, null, __jsx(\"h1\", null, section.content));\n}\n\nfunction H2(section) {\n  return __jsx(\"a\", {\n    name: section.content\n  }, __jsx(\"h2\", null, section.content));\n}\n\nfunction P(section) {\n  return __jsx(\"p\", {\n    dangerouslySetInnerHTML: {\n      __html: section.content\n    }\n  });\n}\n\nfunction Code(section) {\n  let lang = 'basic';\n  if (section.lang === 'js') lang = 'javascript';\n  if (section.lang === 'bash') lang = 'bash';\n  if (section.lang === 'css') lang = 'scss';\n  if (section.lang === 'html') lang = 'html';\n  const customStyle = {\n    border: 0,\n    borderRadius: 0\n  };\n  return __jsx(React.Fragment, null, __jsx(SyntaxHighlighter, {\n    language: lang,\n    customStyle: customStyle,\n    style: twilight,\n    showLineNumbers: true\n  }, section.content));\n}\n\nexport default class ElementBody extends React.Component {\n  constructor(props) {\n    super(props);\n    this.emitStickyEvent = this.emitStickyEvent.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.emitStickyEvent);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.emitStickyEvent);\n  }\n\n  emitStickyEvent() {\n    const y = window.scrollY || window.pageYOffset;\n\n    if (y > 150) {\n      const enableSticky = new Event('Header:enableSticky');\n      window.dispatchEvent(enableSticky);\n    } else {\n      const disableSticky = new Event('Header:disableSticky');\n      window.dispatchEvent(disableSticky);\n    }\n  }\n\n  render() {\n    if (!this.props.element) return null;\n    const element = this.props.element;\n    const sections = element.sections;\n    console.log('ElementBody element', element);\n    const style = {\n      display: 'block',\n      position: 'relative',\n      top: '-7rem',\n      visibility: 'hidden'\n    };\n    return __jsx(\"div\", {\n      className: styles.ElementBody\n    }, __jsx(Card, null, __jsx(\"section\", null, sections.map((section, idx) => __jsx(\"div\", {\n      key: idx\n    }, section.type === 'h1' && H1(section), section.type === 'h2' && H2(section), section.type === 'p' && P(section), section.type === 'code' && Code(section))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}