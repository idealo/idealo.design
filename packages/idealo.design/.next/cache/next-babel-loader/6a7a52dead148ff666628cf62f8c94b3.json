{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport { DOCS_MODE } from 'global';\nimport React, { FunctionComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Location, LocationProvider } from '@storybook/router';\nimport { Provider as ManagerProvider, Combo } from '@storybook/api';\nimport { ThemeProvider, ensure as ensureTheme } from '@storybook/theming';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { Global, createGlobal, styled } from '@storybook/theming'; // import App from './app';\n// import Provider from './provider';\n// @ts-ignore\n\nThemeProvider.displayName = 'ThemeProvider'; // @ts-ignore\n\nHelmetProvider.displayName = 'HelmetProvider';\n\nvar getDocsMode = function getDocsMode() {\n  try {\n    return !!DOCS_MODE;\n  } catch (e) {\n    return false;\n  }\n};\n\nvar Container = process.env.XSTORYBOOK_EXAMPLE_APP ? React.StrictMode : React.Fragment; // import React from 'react'\n\nimport { Desktop } from '@storybook/ui/dist/components/layout/desktop';\nimport { Sidebar } from '@storybook/ui/dist/containers/nav';\nimport stuff from '@storybook/ui/dist/containers/nav';\nimport Preview from '@storybook/ui/dist/containers/preview';\nimport Panel from '@storybook/ui/dist/containers/panel';\nimport Notifications from '@storybook/ui/dist/containers/notifications';\nimport SettingsPages from '@storybook/ui/dist/settings';\nimport { SPanel, SMain, SPreview, Layout } from '@storybook/ui/dist/components/layout/container'; // import { Panel } from '@storybook/ui/dist/components/panel/panel'\n\nimport { styled as theme } from '@storybook/theming/dist/'; // import { ThemeProvider, ensure as ensureTheme } from '@storybook/theming/dist';\n\nimport App from '@storybook/ui/dist/app';\nimport { Root, Provider } from '@storybook/ui/dist';\nimport { addons } from '@storybook/addons/dist';\nconsole.debug('stuff', stuff());\nimport dynamic from 'next/dynamic'; // import { Provider } from '@storybook/ui/dist';\n\nvar View = styled.div({\n  position: 'fixed',\n  overflow: 'hidden',\n  height: '100vh',\n  width: '100vw'\n});\naddons.setConfig({\n  /**\n   * show story component as full screen\n   * @type {Boolean}\n   */\n  isFullscreen: false,\n\n  /**\n   * display panel that shows a list of stories\n   * @type {Boolean}\n   */\n  showNav: false,\n\n  /**\n   * display panel that shows addon configurations\n   * @type {Boolean}\n   */\n  showPanel: false,\n\n  /**\n   * where to show the addon panel\n   * @type {('bottom'|'right')}\n   */\n  panelPosition: 'bottom',\n\n  /**\n   * sidebar tree animations\n   * @type {Boolean}\n   */\n  sidebarAnimations: false,\n\n  /**\n   * enable/disable shortcuts\n   * @type {Boolean}\n   */\n  enableShortcuts: true,\n\n  /**\n   * show/hide tool bar\n   * @type {Boolean}\n   */\n  isToolshown: false,\n\n  /**\n   * theme storybook, see link below\n   */\n  theme: undefined,\n\n  /**\n   * id to select an addon panel\n   * @type {String}\n   */\n  selectedPanel: undefined\n});\n\nvar MyProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(MyProvider, _Provider);\n\n  function MyProvider() {\n    var _this;\n\n    _classCallCheck(this, MyProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyProvider).call(this));\n    _this.addons = addons;\n    _this.channel = {\n      on: function on() {},\n      off: function off() {},\n      emit: function emit() {},\n      addListener: function addListener() {},\n      addPeerListener: function addPeerListener() {}\n    };\n    return _this;\n  }\n\n  _createClass(MyProvider, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return {\n        layout: {\n          isToolsshown: false,\n          showPanel: true,\n          showNav: false,\n          isFullscreen: false,\n          panelPosition: 'top'\n        }\n      };\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(type) {\n      return addons.getElements(type);\n    }\n  }, {\n    key: \"renderPreview\",\n    value: function renderPreview() {\n      return __jsx(\"p\", null, \"This is the Preview\");\n    }\n  }, {\n    key: \"handleAPI\",\n    value: function handleAPI(api) {\n      // no need to do anything for now.\n      addons.loadAddons(api);\n    }\n  }]);\n\n  return MyProvider;\n}(Provider);\n\nvar provider = new MyProvider(); // nextjs ssr breaks with storybook -> csr only\n// const RootWithNoSSR = dynamic(\n//     () => import('@storybook/ui/dist').then(module => {\n//         console.log('MODULE', module)\n//         return (props) => module.Root(props)\n//     }),\n//     { ssr: false }\n// );\n\nvar RootWithNoSSR = dynamic(function () {\n  return __jsx(ComponentPreview, null);\n}, {\n  ssr: false\n});\nconsole.log('RootWithNoSSR', RootWithNoSSR);\n\nvar ComponentPreview = /*#__PURE__*/function (_React$Component) {\n  _inherits(ComponentPreview, _React$Component);\n\n  function ComponentPreview() {\n    _classCallCheck(this, ComponentPreview);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ComponentPreview).apply(this, arguments));\n  }\n\n  _createClass(ComponentPreview, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Container, {\n        key: \"container\"\n      }, __jsx(HelmetProvider, {\n        key: \"helmet.Provider\"\n      }, __jsx(LocationProvider, {\n        key: \"location.provider\"\n      }, __jsx(Location, {\n        key: \"location.consumer\"\n      }, function (locationData) {\n        return __jsx(ManagerProvider, _extends({\n          key: \"manager\",\n          provider: provider\n        }, locationData, {\n          docsMode: getDocsMode()\n        }), function (_ref) {\n          var state = _ref.state,\n              api = _ref.api;\n\n          var panelCount = _Object$keys(api.getPanels()).length;\n\n          var story = api.getData(state.storyId);\n          var props = {\n            Sidebar: Sidebar,\n            Preview: Preview,\n            Panel: Panel,\n            Notifications: Notifications,\n            Nav: Nav,\n            pages: [{\n              key: 'settings',\n              render: function render() {\n                return __jsx(SettingsPages, null);\n              }\n            }]\n          };\n          var size = {\n            width: 500,\n            height: 500\n          };\n          var width = size.width,\n              height = size.height;\n          return __jsx(ThemeProvider, {\n            key: \"theme.provider\",\n            theme: ensureTheme(state.theme)\n          }, __jsx(View, null, __jsx(Desktop, _extends({}, props, {\n            viewMode: state.viewMode,\n            options: state.layout,\n            docsOnly: story && story.parameters && story.parameters.docsOnly\n          }, {\n            width: width,\n            height: height\n          }, {\n            panelCount: panelCount\n          })), __jsx(\"h1\", null, \"muh\")));\n        });\n      })))); // return (\n      //     <Container key=\"container\">\n      //       <HelmetProvider key=\"helmet.Provider\">\n      //         <LocationProvider key=\"location.provider\">\n      //           <Location key=\"location.consumer\">\n      //             {(locationData) => (\n      //                 <ManagerProvider\n      //                   key=\"manager\"\n      //                   provider={provider}\n      //                   {...locationData}\n      //                   docsMode={getDocsMode()}\n      //                 >\n      //                   {({ state, api }) => {\n      //                       const panelCount = Object.keys(api.getPanels()).length;\n      //                       const story = api.getData(state.storyId);\n      //                       const props = {\n      //                           Sidebar,\n      //                           Preview,\n      //                           Panel,\n      //                           Notifications,\n      //                           pages: [\n      //                               {\n      //                                   key: 'settings',\n      //                                   render: () => <SettingsPages />,\n      //                                   /* route: ({ children }) => ( */\n      //                                   /*     {JSON.stringify(children)} */\n      //                                   /* ), */\n      //                               },\n      //                           ],\n      //                       }\n      //                       const size = { width: 500, height: 500 };\n      //                       const { width, height } = size;\n      //                       return (\n      //                           <ThemeProvider key=\"theme.provider\" theme={ensureTheme(state.theme)}>\n      //                             <View>\n      //                               <Global styles={createGlobal} />\n      //                               <Desktop\n      //                                 {...props}\n      //                                 viewMode={state.viewMode}\n      //                                 options={state.layout}\n      //                                 docsOnly={story && story.parameters && story.parameters.docsOnly}\n      //                                 {...{ width, height }}\n      //                                 panelCount={panelCount}\n      //                               />\n      //                             </View>\n      //                             {/* <App */}\n      //                             {/*   key=\"app\" */}\n      //                             {/*   viewMode={state.viewMode} */}\n      //                             {/*   layout={state.layout} */}\n      //                             {/*   panelCount={panelCount} */}\n      //                             {/*   docsOnly={story && story.parameters && story.parameters.docsOnly} */}\n      //                             {/* /> */}\n      //                           </ThemeProvider>\n      //                       );\n      //                   }}\n      //                 </ManagerProvider>\n      //             )}\n      //           </Location>\n      //         </LocationProvider>\n      //       </HelmetProvider>\n      //     </Container>\n      // )\n    }\n  }]);\n\n  return ComponentPreview;\n}(React.Component);\n\nComponentPreview.defaultProps = {\n  id: \"componentPreview\"\n};\nexport { ComponentPreview as default };","map":null,"metadata":{},"sourceType":"module"}