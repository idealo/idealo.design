{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PageLayout from 'components/PageLayout';\nimport ElementPage from 'components/ElementPage';\nimport Router, { withRouter, useRouter } from 'next/router';\nimport { getElementBySlug } from 'data/elements'; // const element = getElementBySlug('button')\n\nexport function getStaticProps(_ref) {\n  var params;\n  return _regeneratorRuntime.async(function getStaticProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          params = _ref.params;\n          console.log('getStaticProps', params);\n          return _context.abrupt(\"return\", {\n            props: {\n              id: 12345\n            }\n          });\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function getStaticPaths() {\n  return _regeneratorRuntime.async(function getStaticPaths$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // Return a list of possible value for id\n          console.log('getStaticPaths called');\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n} // class ElementPageView extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         console.log('ElementPageView constructor props', props)\n//         this.state = {\n//             element: null\n//         }\n//         this.handleRouteChange = this.handleRouteChange.bind(this)\n//     }\n//     componentDidMount() {\n//         const { elementName } = this.props.router.query\n//         console.debug('elementPageView:componentDidMount this.props.router', this.props.router)\n//         this.setState({\n//             element: getElementBySlug(elementName)\n//         })\n//         Router.events.on('routeChangeStart', this.handleRouteChange)\n//     }\n//     componentWillUnmount() {\n//         Router.events.off('routeChangeStart', this.handleRouteChange)\n//     }\n//     handleRouteChange() {\n//         const { elementName } = this.props.router.query\n//         console.debug('elementPageView:handleRouteChange elementName', this.props.router)\n//         this.setState({\n//             element: getElementBySlug(elementName)\n//         })\n//     }\n//     async getStaticProps({ params }) {\n//         console.log('Class: getStaticProps', params)\n//         return {\n//             props: {\n//                 id: 12345,\n//             }\n//         }\n//     }\n//     async getStaticPaths() {\n//         // Return a list of possible value for id\n//         console.log('Class: getStaticPaths called')\n//     }\n//     render() {\n//         return (\n//             <ElementPage element={this.state.element} />\n//         )\n//     }\n// }\n\nfunction ElementPageView(_ref2) {\n  var element = _ref2.element;\n\n  if (!element) {\n    var router = useRouter();\n    var slug = router.query.element;\n    element = getElementBySlug(slug);\n  }\n\n  return __jsx(ElementPage, {\n    element: element\n  });\n}\n\nElementPageView.getInitialProps = function _callee(_ref3) {\n  var req, elementSlug, element;\n  return _regeneratorRuntime.async(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          req = _ref3.req;\n          elementSlug = req && req.params ? req.params.element : '';\n          console.log('ElementPageView.getInitialProps elementSlug', elementSlug);\n          element = getElementBySlug(elementSlug);\n          return _context3.abrupt(\"return\", {\n            element: element\n          });\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(ElementPageView);","map":null,"metadata":{},"sourceType":"module"}