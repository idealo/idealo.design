{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { DOCS_MODE } from 'global';\nimport React, { FunctionComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Location, LocationProvider } from '@storybook/router';\nimport { Provider as ManagerProvider, Combo } from '@storybook/api';\nimport { ThemeProvider, ensure as ensureTheme } from '@storybook/theming';\nimport { HelmetProvider } from 'react-helmet-async';\nimport { Global, createGlobal, styled } from '@storybook/theming'; // import App from './app';\n// import Provider from './provider';\n// @ts-ignore\n\nThemeProvider.displayName = 'ThemeProvider'; // @ts-ignore\n\nHelmetProvider.displayName = 'HelmetProvider';\n\nconst getDocsMode = () => {\n  try {\n    return !!DOCS_MODE;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst Container = process.env.XSTORYBOOK_EXAMPLE_APP ? React.StrictMode : React.Fragment; // import React from 'react'\n\nimport { Desktop } from '@storybook/ui/dist/components/layout/desktop';\nimport { Sidebar } from '@storybook/ui/dist/containers/nav';\nimport stuff from '@storybook/ui/dist/containers/nav';\nimport Preview from '@storybook/ui/dist/containers/preview';\nimport Panel from '@storybook/ui/dist/containers/panel';\nimport Notifications from '@storybook/ui/dist/containers/notifications';\nimport SettingsPages from '@storybook/ui/dist/settings';\nimport { SPanel, SMain, SPreview, Layout } from '@storybook/ui/dist/components/layout/container'; // import { Panel } from '@storybook/ui/dist/components/panel/panel'\n\nimport { styled as theme } from '@storybook/theming/dist/'; // import { ThemeProvider, ensure as ensureTheme } from '@storybook/theming/dist';\n\nimport App from '@storybook/ui/dist/app';\nimport { Root, Provider } from '@storybook/ui/dist';\nimport { addons } from '@storybook/addons/dist';\nconsole.debug('stuff', stuff());\nimport dynamic from 'next/dynamic'; // import { Provider } from '@storybook/ui/dist';\n\nconst View = styled.div({\n  position: 'fixed',\n  overflow: 'hidden',\n  height: '100vh',\n  width: '100vw'\n});\naddons.setConfig({\n  /**\n   * show story component as full screen\n   * @type {Boolean}\n   */\n  isFullscreen: false,\n\n  /**\n   * display panel that shows a list of stories\n   * @type {Boolean}\n   */\n  showNav: false,\n\n  /**\n   * display panel that shows addon configurations\n   * @type {Boolean}\n   */\n  showPanel: false,\n\n  /**\n   * where to show the addon panel\n   * @type {('bottom'|'right')}\n   */\n  panelPosition: 'bottom',\n\n  /**\n   * sidebar tree animations\n   * @type {Boolean}\n   */\n  sidebarAnimations: false,\n\n  /**\n   * enable/disable shortcuts\n   * @type {Boolean}\n   */\n  enableShortcuts: true,\n\n  /**\n   * show/hide tool bar\n   * @type {Boolean}\n   */\n  isToolshown: false,\n\n  /**\n   * theme storybook, see link below\n   */\n  theme: undefined,\n\n  /**\n   * id to select an addon panel\n   * @type {String}\n   */\n  selectedPanel: undefined\n});\n\nclass MyProvider extends Provider {\n  constructor() {\n    super();\n    this.addons = addons;\n    this.channel = {\n      on: () => {},\n      off: () => {},\n      emit: () => {},\n      addListener: () => {},\n      addPeerListener: () => {}\n    };\n  }\n\n  getConfig() {\n    return {\n      layout: {\n        isToolsshown: false,\n        showPanel: true,\n        showNav: false,\n        isFullscreen: false,\n        panelPosition: 'top'\n      }\n    };\n  }\n\n  getElements(type) {\n    return addons.getElements(type);\n  }\n\n  renderPreview() {\n    return __jsx(\"p\", null, \"This is the Preview\");\n  }\n\n  handleAPI(api) {\n    // no need to do anything for now.\n    addons.loadAddons(api);\n  }\n\n}\n\nconst provider = new MyProvider(); // nextjs ssr breaks with storybook -> csr only\n// const RootWithNoSSR = dynamic(\n//     () => import('@storybook/ui/dist').then(module => {\n//         console.log('MODULE', module)\n//         return (props) => module.Root(props)\n//     }),\n//     { ssr: false }\n// );\n\nconst RootWithNoSSR = dynamic(() => __jsx(ComponentPreview, null), {\n  ssr: false\n});\nconsole.log('RootWithNoSSR', RootWithNoSSR);\n\nclass ComponentPreview extends React.Component {\n  render() {\n    return __jsx(Container, {\n      key: \"container\"\n    }, __jsx(HelmetProvider, {\n      key: \"helmet.Provider\"\n    }, __jsx(LocationProvider, {\n      key: \"location.provider\"\n    }, __jsx(Location, {\n      key: \"location.consumer\"\n    }, locationData => __jsx(ManagerProvider, _extends({\n      key: \"manager\",\n      provider: provider\n    }, locationData, {\n      docsMode: getDocsMode()\n    }), ({\n      state,\n      api\n    }) => {\n      const panelCount = Object.keys(api.getPanels()).length;\n      const story = api.getData(state.storyId);\n      const props = {\n        Sidebar,\n        Preview,\n        Panel,\n        Notifications,\n        Nav,\n        pages: [{\n          key: 'settings',\n          render: () => __jsx(SettingsPages, null)\n        }]\n      };\n      const size = {\n        width: 500,\n        height: 500\n      };\n      const {\n        width,\n        height\n      } = size;\n      return __jsx(ThemeProvider, {\n        key: \"theme.provider\",\n        theme: ensureTheme(state.theme)\n      }, __jsx(View, null, __jsx(Desktop, _extends({}, props, {\n        viewMode: state.viewMode,\n        options: state.layout,\n        docsOnly: story && story.parameters && story.parameters.docsOnly\n      }, {\n        width,\n        height\n      }, {\n        panelCount: panelCount\n      })), __jsx(\"h1\", null, \"muh\")));\n    }))))); // return (\n    //     <Container key=\"container\">\n    //       <HelmetProvider key=\"helmet.Provider\">\n    //         <LocationProvider key=\"location.provider\">\n    //           <Location key=\"location.consumer\">\n    //             {(locationData) => (\n    //                 <ManagerProvider\n    //                   key=\"manager\"\n    //                   provider={provider}\n    //                   {...locationData}\n    //                   docsMode={getDocsMode()}\n    //                 >\n    //                   {({ state, api }) => {\n    //                       const panelCount = Object.keys(api.getPanels()).length;\n    //                       const story = api.getData(state.storyId);\n    //                       const props = {\n    //                           Sidebar,\n    //                           Preview,\n    //                           Panel,\n    //                           Notifications,\n    //                           pages: [\n    //                               {\n    //                                   key: 'settings',\n    //                                   render: () => <SettingsPages />,\n    //                                   /* route: ({ children }) => ( */\n    //                                   /*     {JSON.stringify(children)} */\n    //                                   /* ), */\n    //                               },\n    //                           ],\n    //                       }\n    //                       const size = { width: 500, height: 500 };\n    //                       const { width, height } = size;\n    //                       return (\n    //                           <ThemeProvider key=\"theme.provider\" theme={ensureTheme(state.theme)}>\n    //                             <View>\n    //                               <Global styles={createGlobal} />\n    //                               <Desktop\n    //                                 {...props}\n    //                                 viewMode={state.viewMode}\n    //                                 options={state.layout}\n    //                                 docsOnly={story && story.parameters && story.parameters.docsOnly}\n    //                                 {...{ width, height }}\n    //                                 panelCount={panelCount}\n    //                               />\n    //                             </View>\n    //                             {/* <App */}\n    //                             {/*   key=\"app\" */}\n    //                             {/*   viewMode={state.viewMode} */}\n    //                             {/*   layout={state.layout} */}\n    //                             {/*   panelCount={panelCount} */}\n    //                             {/*   docsOnly={story && story.parameters && story.parameters.docsOnly} */}\n    //                             {/* /> */}\n    //                           </ThemeProvider>\n    //                       );\n    //                   }}\n    //                 </ManagerProvider>\n    //             )}\n    //           </Location>\n    //         </LocationProvider>\n    //       </HelmetProvider>\n    //     </Container>\n    // )\n  }\n\n}\n\nComponentPreview.defaultProps = {\n  id: \"componentPreview\"\n};\nexport { ComponentPreview as default };","map":null,"metadata":{},"sourceType":"module"}